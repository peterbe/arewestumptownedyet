{"version":3,"sources":["Stats.js","App.js","index.js"],"names":["Stats","isServer","document","navigator","userAgent","App","href","className","kuma","toLocaleString","stumptown","toFixed","ts","date","Date","toLocaleDateString","StatsChart","HistoryChart","data","labels","values","roughness","width","stroke","strokeWidth","y","xLabel","yLabel","title","legend","circleRadius","rootElement","getElementById","hasChildNodes","hydrate","render"],"mappings":"qNAIaA,G,YAAQ,CACnB,KAAQ,cACR,KAAQ,CACN,QAAS,MACT,IAAO,OAET,UAAa,CACX,QAAS,GACT,IAAO,QCLEC,EACS,qBAAbC,UAAoD,cAAxBC,UAAUC,UAyEhCC,MAvEf,WACE,OACE,6BACE,uDACA,qCAEA,4CACA,gIAEgC,IAC9B,uBAAGC,KAAK,iCAAR,QAHF,gDAI0B,IACxB,oFALF,KAOA,+DACA,4BACE,4BACE,uBAAGA,KAAK,4CACN,gEACG,IAHP,8CAMA,4BACE,uBAAGA,KAAK,6CACN,iEACG,IAHP,+DAOF,yGAEK,+DAFL,kDAGqB,oDAHrB,KAMA,8CACA,4BACE,qCACQ,uCADR,MAGA,wBAAIC,UAAU,UAAUP,EAAMQ,KAAK,SAASC,kBAE5C,0CACa,uCADb,MAGA,wBAAIF,UAAU,UAAUP,EAAMU,UAAU,SAASD,kBACjD,4CACgB,KAEX,IAAMT,EAAMU,UAAU,UACtBV,EAAMU,UAAU,SAAWV,EAAMQ,KAAK,WACvCG,QAAQ,GALZ,cASF,2BACE,yCAUiBC,EAVaZ,EAAMa,KAWhC,IAAIC,KAAKF,GACVG,wBAVL,6BACE,kBAACC,EAAD,MACA,kBAACC,EAAD,QAMR,IAAyBL,GAOzB,SAASI,IACP,GAAIf,EACF,OAAO,2DAET,IAAMiB,EAAO,CACXC,OAAQ,CAAC,eAAgB,aACzBC,OAAQ,CAACpB,EAAMQ,KAAK,SAAUR,EAAMU,UAAU,WAGhD,OAAO,kBAAC,MAAD,CAAKQ,KAAMA,EAAMG,UAAW,EAAGC,MAAO,IAAKC,OAAO,YAG3D,SAASN,IACP,GAAIhB,EACF,OAAO,2DAKT,OACE,kBAAC,OAAD,CACEiB,KALkC,cAMlCG,UAAW,EACXC,MAAO,IACPE,YAAa,IAEbC,EAAE,QACFC,OAAO,OACPC,OAAO,mBACPJ,OAAO,UACPK,MAAM,8BACNC,QAAQ,EACRC,aAAc,IC7GpB,IAAMC,EAAc7B,SAAS8B,eAAe,QACxCD,EAAYE,gBACdC,kBAAQ,kBAAC,EAAD,MAASH,GAEjBI,iBAAO,kBAAC,EAAD,MAASJ,I","file":"static/js/main.e75273a7.chunk.js","sourcesContent":["/** This page is auto-generated from inject-stats.js\n * Date: Fri Oct 25 2019 09:44:31 GMT-0400 (Eastern Daylight Time)\n */\n\nexport const Stats = {\n  \"date\": 1572011071446,\n  \"kuma\": {\n    \"en-US\": 18256,\n    \"all\": 64262\n  },\n  \"stumptown\": {\n    \"en-US\": 78,\n    \"all\": null\n  }\n};\n","import React from \"react\";\nimport { Bar, Line } from \"react-roughviz\";\nimport \"./light.css\";\nimport \"./App.css\";\n\nimport { Stats } from \"./Stats\";\n\nexport const isServer =\n  typeof document === \"undefined\" || navigator.userAgent === \"ReactSnap\";\n\nfunction App() {\n  return (\n    <div>\n      <h1>Are We Stumptowned Yet?</h1>\n      <h2>No :(</h2>\n\n      <h3>What's this?</h3>\n      <p>\n        Stumptown is a Mozilla MDN project to rewrite existing documentation\n        about web development, from a{\" \"}\n        <a href=\"https://developer.mozilla.org\">Wiki</a>, stored in a central\n        relational database, to{\" \"}\n        <b>strutured content (e.g. Markdown files) in a Git repo</b>.\n      </p>\n      <p>Stumptown consists of two parts:</p>\n      <ul>\n        <li>\n          <a href=\"https://github.com/mdn/stumptown-content\">\n            <b>github.com/mdn/stumptown-content</b>\n          </a>{\" \"}\n          - the actual content (plus some scripting)\n        </li>\n        <li>\n          <a href=\"https://github.com/mdn/stumptown-renderer\">\n            <b>github.com/mdn/stumptown-renderer</b>\n          </a>{\" \"}\n          - React components for turning content into HTML web pages\n        </li>\n      </ul>\n      <p>\n        This site is about attempting to measure how many ready pages there are\n        in <b>github.com/mdn/stumptown-content</b> and contrast that with the\n        number of pages in <b>developer.mozilla.org</b>.\n      </p>\n\n      <h3>Current Status</h3>\n      <dl>\n        <dt>\n          Kuma (<code>en-US</code>):\n        </dt>\n        <dd className=\"number\">{Stats.kuma[\"en-US\"].toLocaleString()}</dd>\n\n        <dt>\n          Stumptown (<code>en-US</code>):\n        </dt>\n        <dd className=\"number\">{Stats.stumptown[\"en-US\"].toLocaleString()}</dd>\n        <dd>\n          Approximately{\" \"}\n          {(\n            (100 * Stats.stumptown[\"en-US\"]) /\n            (Stats.stumptown[\"en-US\"] + Stats.kuma[\"en-US\"])\n          ).toFixed(1)}\n          % of Kuma\n        </dd>\n      </dl>\n      <p>\n        <small>As of {prettyTimestamp(Stats.date)}</small>\n      </p>\n      <div>\n        <StatsChart />\n        <HistoryChart />\n      </div>\n    </div>\n  );\n}\n\nfunction prettyTimestamp(ts) {\n  const d = new Date(ts);\n  return d.toLocaleDateString();\n}\n\nexport default App;\n\nfunction StatsChart() {\n  if (isServer) {\n    return <i>No SVG charts in server mode</i>;\n  }\n  const data = {\n    labels: [\"Kuma (en-US)\", \"Stumptown\"],\n    values: [Stats.kuma[\"en-US\"], Stats.stumptown[\"en-US\"]]\n  };\n\n  return <Bar data={data} roughness={2} width={800} stroke=\"#cccccc\" />;\n}\n\nfunction HistoryChart() {\n  if (isServer) {\n    return <i>No SVG charts in server mode</i>;\n  }\n  const data = process.env.PUBLIC_URL + \"history.csv\";\n  // Still a bit broken since it doesn't display the dates on the\n  // x-axis.\n  return (\n    <Line\n      data={data}\n      roughness={3}\n      width={800}\n      strokeWidth={1.5}\n      // x=\"date\"\n      y=\"COUNT\"\n      xLabel=\"Time\"\n      yLabel=\"# Stumptown docs\"\n      stroke=\"#cccccc\"\n      title=\"# Stumptdown docs over time\"\n      legend={false}\n      circleRadius={5}\n    />\n  );\n}\n","import React from \"react\";\nimport { hydrate, render } from \"react-dom\";\n// import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n\n// ReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}